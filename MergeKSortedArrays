import java.util.Arrays;
import java.util.PriorityQueue;

public class MergeKSortedArrays {
public static void main(String[] args) {
	int[][] arr= {{1,3,4,8,9},{2,5,7,9,34,67,89},{1,3,6,8,90,567,888}};
	System.out.println(Arrays.toString(merge(arr)));
}

public static int[] merge(int[][] arrays) {
	PriorityQueue<QueueNode> pq=new PriorityQueue<QueueNode>();
	int size=0;
	for(int i=0;i<arrays.length;i++) {
		size+=arrays[i].length;
		if(arrays[i].length>0) {
			pq.add(new QueueNode(i,0,arrays[i][0]));
		}
	}
	int[] result=new int[size];
	for(int i=0;!pq.isEmpty();i++) {
		QueueNode n=pq.poll();
		result[i]=n.value;
		int new_index=n.index+1;
		if(arrays[n.array].length>new_index) {
			pq.add(new QueueNode(n.array,new_index,arrays[n.array][new_index]));
		}
	}
	return result;
}
}





public class QueueNode implements Comparable<QueueNode> {

	int array,index,value;
	public QueueNode(int array,int index,int value) {
		this.array=array;
		this.index=index;
		this.value=value;
	}
	public int compareTo(QueueNode n) {
		if(value>n.value) return 1;
		if(value<n.value) return -1;
		return 0;
		
	}
}
