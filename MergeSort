import java.util.Arrays;

public class MergeSort {
public static void main(String[] args) {
	int[] arr= {1,5,3,7,9,10,24,2,4,36,-1,7,6,33};
	System.out.println(Arrays.toString(mergeSort(arr)));
	
}
public static int[] mergeSort(int[] arr) {
	
	if(arr.length==0) return new int[] {};
	return mergeSort(arr,new int[arr.length],0,arr.length-1);
	
}
public static int [] mergeSort(int[] arr,int[] temp,int left_start,int right_end) {
	if(left_start>=right_end) return new int[] {};
	int middle=(left_start+right_end)/2;
	mergeSort(arr,temp,left_start,middle);
	mergeSort(arr,temp,middle+1,right_end);
	return mergeHalfs(arr,temp,left_start,right_end);
}
public static int[] mergeHalfs(int[] arr,int[] temp,int left_start,int right_end) {
int left_end=(right_end+left_start)/2;
int right_start=left_end+1;
int size=right_end-left_start+1;
	int left=left_start;
int right=right_start;
int index=left_start;
while(left<=left_end && right<=right_end) {
	if(arr[left]<=arr[right]) { 
		temp[index]=arr[left];
		left++;
		index++;
	}
	else {
		temp[index]=arr[right];
		right++;
		index++;
	}
	}
System.arraycopy(arr, left, temp, index, left_end-left+1);
System.arraycopy(arr, right, temp, index, right_end-right+1);
System.arraycopy(temp,left_start, arr,left_start,size);
return temp;
}



}
